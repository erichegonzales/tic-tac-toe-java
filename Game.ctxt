#BlueJ class context
comment0.target=Game
comment0.text=\n\ Represents\ a\ Tic-tac-toe\ game.\n\n\ @version\ CMPU-102\ special\ edition\n\ @author\ Eriche\ Gonzales\n\ @date\ April\ 1,\ 2022\n
comment1.params=boardSize
comment1.target=Game(int)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ TicGame.\n
comment2.params=
comment2.target=int\ getBoardSize()
comment2.text=\n\ Returns\ the\ game\ board\ size.\n\ @return\ the\ game\ board\ size\n
comment3.params=
comment3.target=void\ resetGame()
comment3.text=\n\ Resets\ the\ game\ state\ so\ we\ can\ play\ again.\n
comment4.params=move
comment4.target=char\ isValidMove(Move)
comment4.text=\n\ Validates\ a\ potential\ move.\ Returns\ 'V'\ if\ the\ move\ is\ valid,\ or\ a\ different\ character\ indicating\ the\ reason\ why\ the\ move\ is\ invalid.\n\ @param\ move\ -\ the\ move\ to\ be\ validated.\n\ @return\ 'V'\ is\ move\ is\ valid,\ 'R'\ if\ it\ specifies\ an\ invalid\ row,\ 'C'\ if\ it\ specifies\ an\ invalid\ column,\ or\ 'O'\ if\ it\ refers\ to\ an\ already-occupied\ position.\n
comment5.params=move\ symbol
comment5.target=boolean\ executeMove(Move,\ char)
comment5.text=\n\ Executes\ the\ move\ passed\ as\ an\ argument.\ If\ the\ move\ is\ invalid,\ it\ returns\ false.\n\ @param\ move\ -\ the\ move\ to\ be\ executed\n\ @param\ symbol\ -\ the\ symbol\ of\ the\ player\ who\ is\ making\ the\ move\n\ @return\ true\ if\ the\ move\ was\ successfully\ executed\n
comment6.params=
comment6.target=char\ getGameStatus()
comment6.text=\n\ A\ method\ that\ analyzes\ the\ board\ to\ determine\ the\ current\ game\ state,\ which\ is\ then\ returned\ as\ a\ character.\ A\ game\ is\ over\ if\ either\ player\ has\ completed\ a\ row,\ a\ line,\ or\ a\ diagonal.\ Moreover,\ a\ game\ is\ also\ over\ if\ the\ board\ is\ full,\ even\ if\ no\ player\ completed\ a\ row,\ line,\ or\ diagonal.\ That\ indicates\ a\ tie\ situation.\n\ @return\ A\ character\ indicating\ the\ game\ state\:\ '?'\ if\ the\ game\ isn't\ over\ yet,\ 'T'\ if\ the\ game\ is\ over\ and\ tied,\ or,\ if\ a\ player\ won,\ the\ winning\ player's\ symbol\ ('X'\ or\ 'O').\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\n\ Creates\ a\ textual\ representation\ of\ the\ game\ board.\n\ \n\ \ \ \ 1\ \ \ 2\ \ \ 3\n\ A\ \ X\ |\ O\ |\ O\ \n\ \ \ ---|---|---\n\ B\ \ \ \ |\ X\ |\ \ \ \n\ \ \ ---|---|---\n\ C\ \ O\ |\ \ \ |\ X\ \n\n\ @return\ A\ String\ representing\ the\ game\ board\ in\ the\ aforementioned\ format.\n
comment8.params=
comment8.target=char\ playSingleGame()
comment8.text=\n\ Plays\ a\ single\ game\ of\ Tic-tac-toe\ by\ having\ players\ pick\ moves\ in\ turn.\ The\ first\ player\ to\ play\ is\ choosen\ uniformly\ at\ random.\n\ @return\ A\ character\ representing\ the\ game's\ result\:\ 'H'\ if\ the\ human\ player\ won,\ 'C'\ if\ the\ CPU\ won,\ 'T'\ if\ there\ was\ a\ tie,\ or\ 'Q'\ if\ the\ human\ quit\ the\ game.\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\n\ Runs\ consecutive\ Tic-tac-toe\ games\ until\ the\ user\ gets\ tired\ and\ quits.\ When\ the\ user\ quits,\ the\ win-loss-tie\ statistics\ are\ printed.\n\ @param\ args\ The\ first\ argument\ represents\ the\ desired\ game\ board\ size,\ which\ should\ be\ an\ integer\ in\ [1,9].\ If\ the\ provided\ board\ size\ does\ not\ comply\ with\ these\ rules\ or\ if\ no\ argument\ is\ provided,\ a\ default\ game\ board\ size\ of\ 3\ x\ 3\ will\ be\ used.\n
numComments=10
